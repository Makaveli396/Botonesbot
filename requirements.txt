# requirements.txt
python-telegram-bot==20.7
python-dotenv==1.0.0
asyncio

# Dockerfile (opcional)
FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

# Puerto para Render (necesario para web service)
EXPOSE 10000

CMD ["python", "bot.py"]

# render.yaml (configuración para Render)
services:
  - type: web
    name: telegram-multi-publisher-bot
    env: python
    buildCommand: pip install -r requirements.txt
    startCommand: python bot.py
    envVars:
      - key: BOT_TOKEN
        sync: false
      - key: PORT
        value: 10000
    plan: free
    region: oregon
    
# .env (archivo local - NO subir a git)
BOT_TOKEN=tu_token_aqui_de_botfather
PORT=10000

# .gitignore
__pycache__/
*.pyc
*.pyo
*.pyd
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Bot specific
channels_data.json
scheduled_posts.json
*.log

# README.md para el proyecto
# Bot Publicador Multi-Canal de Telegram

Bot profesional para publicar contenido multimedia simultáneamente en múltiples canales y grupos de Telegram.

## 🚀 Características Principales

### 📺 Gestión Multi-Canal
- ✅ Publicación simultánea en múltiples canales
- ✅ Gestión centralizada de canales
- ✅ Verificación automática de permisos
- ✅ Estadísticas de alcance en tiempo real

### 🎨 Personalización Avanzada
- ✅ Texto personalizado por canal
- ✅ Botones interactivos globales
- ✅ Vista previa detallada
- ✅ Formato Markdown/HTML

### 📱 Multimedia Completo
- ✅ Imágenes individuales y álbumes
- ✅ Videos, GIFs, video mensajes
- ✅ Audio, notas de voz
- ✅ Documentos, PDFs, archivos
- ✅ Stickers y animaciones

### 🔘 Botones Interactivos
- ✅ Enlaces web externos
- ✅ Enlaces a canales/grupos
- ✅ Callbacks personalizados
- ✅ Botones de contacto

## 🛠️ Instalación y Configuración

### 1. Crear el Bot
1. Habla con [@BotFather](https://t.me/botfather) en Telegram
2. Usa `/newbot` y sigue las instrucciones
3. Guarda el token que te proporciona

### 2. Configurar Permisos de Canales
Para cada canal donde quieras publicar:
1. Añade tu bot como administrador
2. Dale estos permisos:
   - ✅ Publicar mensajes
   - ✅ Editar mensajes  
   - ✅ Eliminar mensajes
   - ✅ Invitar usuarios (opcional)

### 3. Despliegue Local
```bash
# Clonar y configurar
git clone <tu-repositorio>
cd telegram-multi-publisher-bot

# Instalar dependencias
pip install -r requirements.txt

# Configurar token
export BOT_TOKEN="tu_token_aqui"

# Ejecutar
python bot.py
```

### 4. Despliegue en Render (GRATIS) 🌟

#### Opción A: Desde GitHub
1. Sube tu código a GitHub
2. Ve a [render.com](https://render.com)
3. Crea cuenta y conecta GitHub
4. "New Web Service" → Selecciona tu repo
5. Configuración:
   - **Name:** `telegram-publisher-bot`
   - **Environment:** `Python 3`
   - **Build Command:** `pip install -r requirements.txt`
   - **Start Command:** `python bot.py`
6. Variables de entorno:
   - `BOT_TOKEN` = tu_token_de_botfather
   - `PORT` = 10000
7. Deploy 🚀

#### Opción B: Deploy Directo
```bash
# Instalar Render CLI
npm install -g @render-sdk/cli

# Login y deploy
render login
render deploy
```

## 📊 Uso del Bot

### Comandos Principales
- `/start` - Iniciar el bot
- `/nueva` - Crear nueva publicación multi-canal
- `/canales` - Gestionar canales conectados
- `/help` - Ayuda completa

### Flujo de Trabajo Recomendado
1. **Configurar Canales** (`/canales`)
   - Añadir canales como administrador
   - Verificar permisos
   - Ver estadísticas

2. **Crear Publicación** (`/nueva`)
   - Seleccionar canales objetivo
   - Añadir contenido multimedia
   - Configurar botones

3. **Personalizar** (Opcional)
   - Texto específico por canal
   - Adaptación a diferentes audiencias

4. **Publicar**
   - Vista previa con alcance total
   - Publicación simultánea
   - Seguimiento de resultados

## 🎯 Funciones Avanzadas

### Personalización por Canal
```
📢 Canal Tech: "🚀 Nueva actualización de la app..."
👥 Grupo General: "¡Hola comunidad! Tenemos novedades..."
📺 Canal Noticias: "BREAKING: Nueva función disponible..."
```

### Botones Interactivos
```
Mi Website | https://misite.com
Canal Principal | https://t.me/mi_canal
Contacto Soporte | callback_support
```

### Multimedia Masivo
- Envía 1 imagen → Se replica en 10 canales
- Sube 1 video → Alcance de 50,000 personas
- 1 documento → Múltiples comunidades

## 📈 Estadísticas y Métricas

El bot proporciona:
- ✅ Alcance total por publicación
- ✅ Éxito/error por canal
- ✅ Conteo de miembros actualizado
- ✅ Rendimiento histórico

## 🔧 Configuración Avanzada

### Variables de Entorno
```bash
BOT_TOKEN=tu_token_aqui          # Token del bot (obligatorio)
PORT=10000                       # Puerto para Render
DEBUG=false                      # Modo debug
MAX_CHANNELS=50                  # Límite de canales por usuario
```

### Límites y Consideraciones
- **Telegram API:** 30 mensajes/segundo
- **Canales simultáneos:** Hasta 50 por usuario
- **Tamaño archivos:** Hasta 50MB por archivo
- **Texto:** Hasta 4096 caracteres por mensaje

## 🛡️ Seguridad y Privacidad

- ✅ Solo administradores pueden añadir canales
- ✅ Verificación de permisos automática
- ✅ No almacena contenido permanentemente
- ✅ Tokens encriptados en variables de entorno

## 🆘 Solución de Problemas

### Error: "Bot no es administrador"
- Verifica que el bot sea admin del canal
- Confirma permisos de publicación
- Reañade el bot si es necesario

### Error: "Canal no encontrado"
- Usa formato correcto: @canal, t.me/canal, o ID numérico
- Verifica que el canal sea público o que tengas acceso
- Para canales privados usa el ID numérico

### Bot no responde en Render
- Verifica variable BOT_TOKEN en dashboard
- Revisa logs en Render dashboard
- Confirma que el plan free esté activo

## 📞 Soporte

- 📧 Email: tu@email.com
- 💬 Telegram: @tu_usuario
- 🐛 Issues: GitHub Issues
- 📖 Docs: Wiki del proyecto

## 📄 Licencia

MIT License - Libre uso y modificación

## 🔄 Actualizaciones Futuras

### En Desarrollo 🚧
- 📅 Programación automática de posts
- 🤖 IA para optimización de contenido
- 📊 Analytics avanzados
- 🔄 Publicación recurrente
- 💾 Base de datos PostgreSQL
- 📋 Sistema de plantillas

### Roadmap 2024
- [ ] Integración con más plataformas
- [ ] API REST para terceros
- [ ] Dashboard web
- [ ] Métricas de engagement
- [ ] A/B testing automático

---

⭐ **¡Dale estrella al proyecto si te resulta útil!**# requirements.txt
python-telegram-bot==20.7
python-dotenv==1.0.0
asyncio

# Dockerfile (opcional)
FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD ["python", "bot.py"]

# render.yaml (configuración para Render)
services:
  - type: web
    name: telegram-publisher-bot
    env: python
    buildCommand: pip install -r requirements.txt
    startCommand: python bot.py
    envVars:
      - key: BOT_TOKEN
        sync: false
    plan: free

# .env (archivo local - NO subir a git)
BOT_TOKEN=tu_token_aqui_de_botfather

# .gitignore
__pycache__/
*.pyc
*.pyo
*.pyd
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
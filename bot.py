import logging
import os
import json
from datetime import datetime
from typing import Dict, List, Optional, Set
from aiohttp import web
from aiohttp.web_request import Request
from aiohttp.web_response import Response

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode
from telegram.error import TelegramError, Forbidden, BadRequest

# Configuraci√≥n
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv('BOT_TOKEN')
PORT = int(os.getenv('PORT', 10000))
WEBHOOK_URL = os.getenv('WEBHOOK_URL', f'https://telegram-multi-publisher-bot.onrender.com')

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN no configurado")

# Almacenamiento en memoria
user_data = {}

class PostButton:
    """Clase para representar un bot√≥n de publicaci√≥n"""
    def __init__(self, text, url=None, callback_data=None, button_type='url'):
        self.text = text
        self.url = url
        self.callback_data = callback_data
        self.button_type = button_type  # 'url', 'callback', 'inline_query'
    
    def to_telegram_button(self):
        """Convierte a bot√≥n de Telegram"""
        if self.button_type == 'url' and self.url:
            return InlineKeyboardButton(self.text, url=self.url)
        elif self.button_type == 'callback' and self.callback_data:
            return InlineKeyboardButton(self.text, callback_data=self.callback_data)
        else:
            return InlineKeyboardButton(self.text, url=self.url or "https://t.me")

class MediaPost:
    def __init__(self):
        self.text = ""
        self.media = []
        self.target_channels = set()
        self.buttons = []  # Lista de botones
        self.button_layout = "horizontal"  # "horizontal", "vertical", "grid"
        
    def add_media(self, file_id, media_type, caption=None):
        self.media.append({
            'file_id': file_id, 
            'type': media_type,
            'caption': caption
        })
    
    def add_button(self, text, url=None, callback_data=None, button_type='url'):
        """A√±ade un bot√≥n a la publicaci√≥n"""
        button = PostButton(text, url, callback_data, button_type)
        self.buttons.append(button)
    
    def remove_button(self, index):
        """Elimina un bot√≥n por √≠ndice"""
        if 0 <= index < len(self.buttons):
            self.buttons.pop(index)
    
    def get_inline_keyboard(self):
        """Genera el teclado inline para la publicaci√≥n"""
        if not self.buttons:
            return None
        
        keyboard = []
        
        if self.button_layout == "horizontal":
            # Todos los botones en una fila (m√°ximo 3 por fila)
            row = []
            for i, button in enumerate(self.buttons):
                row.append(button.to_telegram_button())
                if len(row) == 3 or i == len(self.buttons) - 1:
                    keyboard.append(row)
                    row = []
                    
        elif self.button_layout == "vertical":
            # Un bot√≥n por fila
            for button in self.buttons:
                keyboard.append([button.to_telegram_button()])
                
        elif self.button_layout == "grid":
            # Grid 2x2 o 2xN
            row = []
            for i, button in enumerate(self.buttons):
                row.append(button.to_telegram_button())
                if len(row) == 2 or i == len(self.buttons) - 1:
                    keyboard.append(row)
                    row = []
        
        return InlineKeyboardMarkup(keyboard) if keyboard else None
    
    def has_content(self):
        return bool(self.text or self.media)

class TelegramBot:
    def __init__(self):
        self.app = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """Configura manejadores del bot"""
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CommandHandler("help", self.help_cmd))
        self.app.add_handler(CommandHandler("nueva", self.new_post))
        self.app.add_handler(CommandHandler("canales", self.manage_channels))
        self.app.add_handler(CommandHandler("estado", self.status))
        self.app.add_handler(CommandHandler("cancelar", self.cancel))
        
        self.app.add_handler(CallbackQueryHandler(self.callback_handler))
        
        # Manejadores de multimedia
        self.app.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        self.app.add_handler(MessageHandler(filters.VIDEO, self.handle_video))
        self.app.add_handler(MessageHandler(filters.ANIMATION, self.handle_animation))
        self.app.add_handler(MessageHandler(filters.AUDIO, self.handle_audio))
        self.app.add_handler(MessageHandler(filters.VOICE, self.handle_voice))
        self.app.add_handler(MessageHandler(filters.Document.ALL, self.handle_document))
        
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
    
    def get_user_data(self, user_id):
        """Obtiene datos del usuario"""
        if user_id not in user_data:
            user_data[user_id] = {
                'current_post': None,
                'step': 'idle',
                'channels': {},
                'last_activity': datetime.now(),
                'button_templates': self.get_default_button_templates()
            }
        user_data[user_id]['last_activity'] = datetime.now()
        return user_data[user_id]
    
    def get_default_button_templates(self):
        """Plantillas de botones predefinidas"""
        return {
            'ecommerce': [
                {'text': 'üõí Comprar Ahora', 'url': 'https://ejemplo.com/producto'},
                {'text': 'üìû Contactar', 'url': 'https://wa.me/1234567890'},
                {'text': '‚≠ê Valorar', 'url': 'https://ejemplo.com/review'}
            ],
            'social': [
                {'text': 'üëç Like', 'callback_data': 'like_post'},
                {'text': 'üí¨ Comentar', 'url': 'https://t.me/mi_canal'},
                {'text': 'üîÑ Compartir', 'callback_data': 'share_post'}
            ],
            'educational': [
                {'text': 'üìö Ver Curso', 'url': 'https://ejemplo.com/curso'},
                {'text': 'üéì Inscribirse', 'url': 'https://ejemplo.com/registro'},
                {'text': 'üí¨ Preguntas', 'url': 'https://t.me/soporte'}
            ],
            'news': [
                {'text': 'üìñ Leer M√°s', 'url': 'https://ejemplo.com/noticia'},
                {'text': 'üîî Suscribirse', 'url': 'https://t.me/noticias'},
                {'text': 'üì§ Compartir', 'callback_data': 'share_news'}
            ]
        }
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /start"""
        user = update.effective_user
        self.get_user_data(user.id)
        
        text = f"""üöÄ **Bot Publicador Multi-Canal con Botones**

¬°Hola {user.first_name}! üëã

**FUNCIONES PRINCIPALES:**
‚Ä¢ üìù Crear publicaciones multimedia
‚Ä¢ üîò A√±adir botones interactivos
‚Ä¢ üì∫ Gestionar m√∫ltiples canales
‚Ä¢ üéØ Publicar simult√°neamente

**TIPOS DE BOTONES:**
‚Ä¢ üîó Links externos
‚Ä¢ üìû WhatsApp/Telegram
‚Ä¢ üõí Tiendas online
‚Ä¢ üìä Encuestas y formularios

**COMANDOS:**
‚Ä¢ /nueva - Nueva publicaci√≥n
‚Ä¢ /canales - Gestionar canales
‚Ä¢ /help - Ayuda completa

¬°Crea contenido interactivo! üéâ"""
        
        keyboard = [
            [KeyboardButton("üìù Nueva Publicaci√≥n"), KeyboardButton("üì∫ Mis Canales")],
            [KeyboardButton("üîò Plantillas de Botones"), KeyboardButton("‚ùì Ayuda")]
        ]
        
        await update.message.reply_text(
            text,
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def new_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Crear nueva publicaci√≥n"""
        user_id = update.effective_user.id
        data = self.get_user_data(user_id)
        
        # Verificar canales
        if not data['channels']:
            keyboard = [[InlineKeyboardButton("‚ûï A√±adir Canal", callback_data="add_channel")]]
            await update.message.reply_text(
                "‚ùå **No tienes canales configurados**\n\n"
                "Primero necesitas a√±adir canales donde publicar.\n"
                "Haz clic en el bot√≥n para empezar.",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # Crear nueva publicaci√≥n
        data['current_post'] = MediaPost()
        data['step'] = 'creating'
        
        keyboard = [
            [InlineKeyboardButton("üìù A√±adir Texto", callback_data="add_text"),
             InlineKeyboardButton("üéØ Seleccionar Canales", callback_data="select_channels")],
            [InlineKeyboardButton("üîò Gestionar Botones", callback_data="manage_buttons")],
            [InlineKeyboardButton("üëÄ Vista Previa", callback_data="preview"),
             InlineKeyboardButton("üì§ Publicar", callback_data="publish")],
            [InlineKeyboardButton("‚ùå Cancelar", callback_data="cancel")]
        ]
        
        await update.message.reply_text(
            f"üéØ **Nueva Publicaci√≥n con Botones**\n\n"
            f"üì∫ Canales disponibles: **{len(data['channels'])}**\n"
            f"üîò Botones: **0**\n"
            f"üìã Estado: **Creando**\n\n"
            f"**Siguiente paso:** A√±ade contenido y botones",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Maneja callbacks de botones"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = self.get_user_data(user_id)
        callback_data = query.data
        
        # Gesti√≥n de botones
        if callback_data == "manage_buttons":
            await self.show_button_management(query, data)
        elif callback_data == "add_button":
            await self.add_button_menu(query, data)
        elif callback_data == "remove_button":
            await self.remove_button_menu(query, data)
        elif callback_data == "button_layout":
            await self.button_layout_menu(query, data)
        elif callback_data.startswith("layout_"):
            layout = callback_data.replace("layout_", "")
            if data.get('current_post'):
                data['current_post'].button_layout = layout
                await query.edit_message_text(
                    f"‚úÖ **Layout actualizado**: {layout}",
                    parse_mode=ParseMode.MARKDOWN
                )
        elif callback_data.startswith("template_"):
            template_name = callback_data.replace("template_", "")
            await self.apply_button_template(query, data, template_name)
        elif callback_data.startswith("remove_btn_"):
            btn_index = int(callback_data.replace("remove_btn_", ""))
            if data.get('current_post'):
                data['current_post'].remove_button(btn_index)
                await self.show_button_management(query, data)
        
        # Resto de callbacks existentes
        elif callback_data == "add_channel":
            data['step'] = 'adding_channel'
            await query.edit_message_text(
                """‚ûï **A√±adir Canal**

**Instrucciones:**
1Ô∏è‚É£ A√±ade el bot como administrador
2Ô∏è‚É£ Otorga permisos de publicaci√≥n  
3Ô∏è‚É£ Env√≠a el identificador del canal

**Formatos v√°lidos:**
‚Ä¢ `@nombre_canal`
‚Ä¢ `https://t.me/nombre_canal`
‚Ä¢ `-100xxxxxxxxx`

üìù **Env√≠a el identificador:**""",
                parse_mode=ParseMode.MARKDOWN
            )
        
        elif callback_data == "select_channels":
            if not data.get('current_post'):
                await query.edit_message_text("‚ùå No hay publicaci√≥n activa")
                return
            await self.show_channel_selection(query, data)
        
        elif callback_data.startswith("toggle_"):
            ch_id = callback_data.replace("toggle_", "")
            if data.get('current_post'):
                if ch_id in data['current_post'].target_channels:
                    data['current_post'].target_channels.remove(ch_id)
                else:
                    data['current_post'].target_channels.add(ch_id)
                await self.show_channel_selection(query, data)
        
        elif callback_data == "add_text":
            data['step'] = 'adding_text'
            await query.edit_message_text(
                "‚úçÔ∏è **Escribir Texto**\n\n"
                "üìù Env√≠a el texto para la publicaci√≥n.\n"
                "‚ú® Puedes usar formato **negrita**, *cursiva*\n\n"
                "Para cancelar, usa /cancelar"
            )
        
        elif callback_data == "preview":
            await self.show_preview(query, data)
        
        elif callback_data == "publish":
            await self.publish_post(query, user_id)
        
        elif callback_data == "cancel":
            data['current_post'] = None
            data['step'] = 'idle'
            await query.edit_message_text("‚ùå **Publicaci√≥n cancelada**")
    
    async def show_button_management(self, query, data):
        """Muestra el men√∫ de gesti√≥n de botones"""
        post = data.get('current_post')
        if not post:
            await query.edit_message_text("‚ùå No hay publicaci√≥n activa")
            return
        
        text = f"üîò **Gesti√≥n de Botones**\n\n"
        text += f"üìä **Botones actuales:** {len(post.buttons)}\n"
        text += f"üìê **Layout:** {post.button_layout}\n\n"
        
        if post.buttons:
            text += "**Botones configurados:**\n"
            for i, button in enumerate(post.buttons, 1):
                icon = "üîó" if button.button_type == 'url' else "‚ö°"
                text += f"{i}. {icon} {button.text}\n"
        
        keyboard = [
            [InlineKeyboardButton("‚ûï A√±adir Bot√≥n", callback_data="add_button")],
            [InlineKeyboardButton("üìê Cambiar Layout", callback_data="button_layout")],
            [InlineKeyboardButton("üìã Usar Plantilla", callback_data="button_templates")]
        ]
        
        if post.buttons:
            keyboard.insert(1, [InlineKeyboardButton("üóëÔ∏è Quitar Bot√≥n", callback_data="remove_button")])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Volver", callback_data="back_to_post")])
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def add_button_menu(self, query, data):
        """Men√∫ para a√±adir bot√≥n"""
        keyboard = [
            [InlineKeyboardButton("üîó Bot√≥n con Link", callback_data="add_url_button")],
            [InlineKeyboardButton("üìû WhatsApp", callback_data="add_whatsapp_button")],
            [InlineKeyboardButton("üì∫ Canal/Grupo", callback_data="add_telegram_button")],
            [InlineKeyboardButton("üìã Usar Plantilla", callback_data="button_templates")],
            [InlineKeyboardButton("‚¨ÖÔ∏è Volver", callback_data="manage_buttons")]
        ]
        
        await query.edit_message_text(
            "‚ûï **A√±adir Bot√≥n**\n\n"
            "Selecciona el tipo de bot√≥n que quieres a√±adir:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def button_layout_menu(self, query, data):
        """Men√∫ para cambiar layout de botones"""
        keyboard = [
            [InlineKeyboardButton("‚ÜîÔ∏è Horizontal", callback_data="layout_horizontal")],
            [InlineKeyboardButton("‚ÜïÔ∏è Vertical", callback_data="layout_vertical")],
            [InlineKeyboardButton("‚¨ú Grid 2x2", callback_data="layout_grid")],
            [InlineKeyboardButton("‚¨ÖÔ∏è Volver", callback_data="manage_buttons")]
        ]
        
        await query.edit_message_text(
            "üìê **Layout de Botones**\n\n"
            "**Horizontal:** Botones en fila (m√°x 3)\n"
            "**Vertical:** Un bot√≥n por fila\n"
            "**Grid:** Botones en cuadr√≠cula 2x2\n\n"
            "Selecciona el layout:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def remove_button_menu(self, query, data):
        """Men√∫ para quitar botones"""
        post = data.get('current_post')
        if not post or not post.buttons:
            await query.edit_message_text("‚ùå No hay botones para quitar")
            return
        
        keyboard = []
        for i, button in enumerate(post.buttons):
            keyboard.append([InlineKeyboardButton(
                f"üóëÔ∏è {button.text[:20]}...",
                callback_data=f"remove_btn_{i}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Volver", callback_data="manage_buttons")])
        
        await query.edit_message_text(
            "üóëÔ∏è **Quitar Bot√≥n**\n\nSelecciona el bot√≥n a eliminar:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def show_preview(self, query, data):
        """Muestra vista previa con botones"""
        post = data.get('current_post')
        if not post:
            await query.edit_message_text("‚ùå No hay publicaci√≥n activa")
            return
        
        text = "üëÄ **Vista Previa**\n\n"
        
        if post.text:
            text += f"üìù **Texto:**\n{post.text[:200]}"
            if len(post.text) > 200:
                text += "..."
            text += "\n\n"
        
        if post.media:
            text += f"üé≠ **Media:** {len(post.media)} archivo(s)\n\n"
        
        if post.buttons:
            text += f"üîò **Botones:** {len(post.buttons)} ({post.button_layout})\n"
            for i, button in enumerate(post.buttons, 1):
                icon = "üîó" if button.button_type == 'url' else "‚ö°"
                text += f"{i}. {icon} {button.text}\n"
            text += "\n"
        
        if post.target_channels:
            text += f"üéØ **Canales:** {len(post.target_channels)} seleccionados\n"
        
        # Mostrar c√≥mo se ver√≠an los botones
        preview_keyboard = post.get_inline_keyboard()
        
        control_keyboard = [
            [InlineKeyboardButton("üîò Gestionar Botones", callback_data="manage_buttons")],
            [InlineKeyboardButton("üì§ Publicar", callback_data="publish"), 
             InlineKeyboardButton("‚ùå Cancelar", callback_data="cancel")]
        ]
        
        await query.edit_message_text(
            text + "\n**‚¨áÔ∏è Vista previa de botones:**",
            reply_markup=InlineKeyboardMarkup(control_keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
        
        # Enviar mensaje adicional con preview de botones
        if preview_keyboard:
            await query.message.reply_text(
                "üìù **As√≠ se ver√° tu publicaci√≥n:**\n\n" + (post.text or "Tu contenido aqu√≠"),
                reply_markup=preview_keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
    
    async def apply_button_template(self, query, data, template_name):
        """Aplica una plantilla de botones"""
        post = data.get('current_post')
        if not post:
            await query.edit_message_text("‚ùå No hay publicaci√≥n activa")
            return
        
        templates = data.get('button_templates', {})
        if template_name not in templates:
            await query.edit_message_text("‚ùå Plantilla no encontrada")
            return
        
        # Limpiar botones existentes
        post.buttons = []
        
        # A√±adir botones de la plantilla
        for btn_data in templates[template_name]:
            post.add_button(
                text=btn_data['text'],
                url=btn_data.get('url'),
                callback_data=btn_data.get('callback_data'),
                button_type=btn_data.get('button_type', 'url')
            )
        
        await query.edit_message_text(
            f"‚úÖ **Plantilla aplicada: {template_name}**\n\n"
            f"üìä Botones a√±adidos: {len(post.buttons)}\n\n"
            f"Puedes editarlos individualmente si necesitas.",
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def publish_post(self, query, user_id):
        """Publica la publicaci√≥n con botones"""
        data = self.get_user_data(user_id)
        post = data.get('current_post')
        
        if not post:
            await query.edit_message_text("‚ùå No hay publicaci√≥n activa")
            return
        
        if not post.target_channels:
            await query.edit_message_text("‚ùå Selecciona al menos un canal")
            return
        
        if not post.has_content():
            await query.edit_message_text("‚ùå La publicaci√≥n est√° vac√≠a")
            return
        
        # Mostrar progreso
        await query.edit_message_text("üöÄ **Publicando con botones...**\n\n‚è≥ Enviando a los canales...")
        
        # Generar teclado de botones
        reply_markup = post.get_inline_keyboard()
        
        # Publicar
        results = []
        success_count = 0
        
        for i, ch_id in enumerate(post.target_channels, 1):
            try:
                channel_info = data['channels'][ch_id]
                channel_name = channel_info.get('title', 'Canal')
                
                # Enviar contenido con botones
                if post.media:
                    media_item = post.media[0]
                    if media_item['type'] == 'photo':
                        await self.app.bot.send_photo(
                            chat_id=ch_id,
                            photo=media_item['file_id'],
                            caption=post.text or "",
                            reply_markup=reply_markup,
                            parse_mode=ParseMode.MARKDOWN
                        )
                    elif media_item['type'] == 'video':
                        await self.app.bot.send_video(
                            chat_id=ch_id,
                            video=media_item['file_id'],
                            caption=post.text or "",
                            reply_markup=reply_markup,
                            parse_mode=ParseMode.MARKDOWN
                        )
                    elif media_item['type'] == 'document':
                        await self.app.bot.send_document(
                            chat_id=ch_id,
                            document=media_item['file_id'],
                            caption=post.text or "",
                            reply_markup=reply_markup,
                            parse_mode=ParseMode.MARKDOWN
                        )
                else:
                    # Solo texto con botones
                    await self.app.bot.send_message(
                        chat_id=ch_id,
                        text=post.text or "üì¢ Publicaci√≥n",
                        reply_markup=reply_markup,
                        parse_mode=ParseMode.MARKDOWN
                    )
                
                results.append(f"‚úÖ **{channel_name}** (con {len(post.buttons)} botones)")
                success_count += 1
                
            except Exception as e:
                results.append(f"‚ùå **{channel_name}**: Error")
                logger.error(f"Error publicando en {ch_id}: {e}")
        
        # Mostrar resultados
        result_text = f"üìä **Resultados de Publicaci√≥n**\n\n"
        result_text += f"‚úÖ **Exitosas:** {success_count}/{len(post.target_channels)}\n"
        result_text += f"üîò **Botones por post:** {len(post.buttons)}\n"
        result_text += f"üìê **Layout:** {post.button_layout}\n\n"
        result_text += "**Detalle:**\n" + "\n".join(results[:8])
        
        # Limpiar datos
        data['current_post'] = None
        data['step'] = 'idle'
        
        await query.edit_message_text(result_text, parse_mode=ParseMode.MARKDOWN)
    
    # Resto de m√©todos existentes (handle_text, add_channel, etc.)
    # [Los m√©todos anteriores se mantienen igual]
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Maneja texto y comandos especiales"""
        user_id = update.effective_user.id
        data = self.get_user_data(user_id)
        text = update.message.text
        
        # Botones del teclado principal
        if text == "üìù Nueva Publicaci√≥n":
            await self.new_post(update, context)
            return
        elif text == "üîò Plantillas de Botones":
            await self.show_button_templates(update, data)
            return
        
        # Manejar pasos espec√≠ficos
        step = data.get('step', 'idle')
        
        if step == 'adding_text' and data.get('current_post'):
            if len(text) > 4096:
                await update.message.reply_text(
                    f"‚ùå **Texto muy largo** ({len(text)}/4096 caracteres)"
                )
                return
            
            data['current_post'].text = text
            data['step'] = 'creating'
            
            keyboard = [
                [InlineKeyboardButton("üîò A√±adir Botones", callback_data="manage_buttons")],
                [InlineKeyboardButton("üëÄ Vista Previa", callback_data="preview")]
            ]
            
            await update.message.reply_text(
                f"üìù **Texto a√±adido** ({len(text)} caracteres)\n\n"
                f"üí° **Siguiente:** A√±ade botones interactivos",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        
        elif step.startswith('adding_button_'):
            # Manejar la creaci√≥n de botones personalizados
            await self.handle_button_creation(update, data, text)
        
        else:
            await update.message.reply_text("üí° Usa los botones del men√∫ principal")
    
    async def show_button_templates(self, update, data):
        """Muestra plantillas de botones disponibles"""
        templates = data.get('button_templates', {})
        
        text = "üìã **Plantillas de Botones**\n\n"
        
        for name, buttons in templates.items():
            text += f"**{name.title()}:**\n"
            for btn in buttons[:2]:  # Mostrar solo los primeros 2
                text += f"‚Ä¢ {btn['text']}\n"
            if len(buttons) > 2:
                text += f"‚Ä¢ ... y {len(buttons) - 2} m√°s\n"
            text += "\n"
        
        keyboard = []
        for template_name in templates.keys():
            keyboard.append([InlineKeyboardButton(
                f"üìã {template_name.title()}",
                callback_data=f"template_{template_name}"
            )])
        
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def handle_button_creation(self, update, data, text):
        """Maneja la creaci√≥n personalizada de botones"""
        step = data.get('step', '')
        post = data.get('current_post')
        
        if not post:
            return
        
        if step == 'adding_button_text':
            # Guardar texto del bot√≥n temporalmente
            data['temp_button_text'] = text
            data['step'] = 'adding_button_url'
            await update.message.reply_text(
                f"üîó **URL del bot√≥n**\n\n"
                f"Bot√≥n: `{text}`\n\n"
                f"Env√≠a la URL completa:\n"
                f"‚Ä¢ https://ejemplo.com\n"
                f"‚Ä¢ https://wa.me/1234567890\n"
                f"‚Ä¢ https://t.me/canal"
            )
        
        elif step == 'adding_button_url':
            # Crear el bot√≥n completo
            button_text = data.get('temp_button_text', 'Bot√≥n')
            
            # Validar URL
            if not (text.startswith('http') or text.startswith('https') or text.startswith('tg:')):
                await update.message.reply_text(
                    "‚ùå **URL inv√°lida**\n\n"
                    "La URL debe empezar con:\n"
                    "‚Ä¢ `https://`\n"
                    "‚Ä¢ `http://`\n"
                    "‚Ä¢ `tg://`"
                )
                return
            
            # A√±adir bot√≥n a la publicaci√≥n
            post.add_button(button_text, url=text, button_type='url')
            
            # Limpiar datos temporales
            data['step'] = 'creating'
            data.pop('temp_button_text', None)
            
            keyboard = [
                [InlineKeyboardButton("‚ûï Otro Bot√≥n", callback_data="add_button")],
                [InlineKeyboardButton("üëÄ Vista Previa", callback_data="preview")],
                [InlineKeyboardButton("üì§ Publicar", callback_data="publish")]
            ]
            
            await update.message.reply_text(
                f"‚úÖ **Bot√≥n a√±adido**\n\n"
                f"üîò **Texto:** {button_text}\n"
                f"üîó **URL:** {text}\n\n"
                f"üìä **Total botones:** {len(post.buttons)}",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
    
    # M√©todos de manejo de multimedia (mantener los existentes)
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Maneja fotos"""
        user_id = update.effective_user.id
        data = self.get_user_data(user_id)
        
        if data.get('current_post'):
            photo = update.message.photo[-1]
            data['current_post'].add_media(photo.file_id, 'photo')
            
            caption = update.message.caption
            if caption and not data['current_post'].text:
                data['current_post'].text = caption
            
            keyboard = [
                [InlineKeyboardButton("üîò A√±adir Botones", callback_data="manage_buttons")],
                [InlineKeyboardButton("üëÄ Vista Previa", callback_data="preview")]
            ]
            
            await update.message.reply_text(
                f"üì∏ **Imagen a√±adida**\n\n"
                f"üí° **Sugerencia:** A√±ade botones para mayor interacci√≥n",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.message.reply_text("üí° **Usa /nueva para crear una publicaci√≥n primero**")
    
    async def handle_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Maneja videos"""
        user_id = update.effective_user.id
        data = self.get_user_data(user_id)
        
        if data.get('current_post'):
            video = update.message.video
            data['current_post'].add_media(video.file_id, 'video')
            
            keyboard = [
                [InlineKeyboardButton("üîò A√±adir Botones", callback_data="manage_buttons")],
                [InlineKeyboardButton("üëÄ Vista Previa", callback_data="preview")]
            ]
            
            await update.message.reply_text(
                f"üé• **Video a√±adido**\n\n"
                f"üí° **Tip:** Los videos con botones tienen m√°s engagement",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.message.reply_text("üí° **Usa /nueva para crear una publicaci√≥n primero**")
    
    # M√©todos existentes (a√±adir canal, gesti√≥n, etc.) se mantienen igual
    async def show_channel_selection(self, query, data):
        """Muestra la selecci√≥n de canales"""
        keyboard = []
        selected_count = len(data['current_post'].target_channels)
        
        for ch_id, ch_info in data['channels'].items():
            selected = ch_id in data['current_post'].target_channels
            icon = "‚úÖ" if selected else "‚¨ú"
            title = ch_info.get('title', 'Canal')[:25]
            keyboard.append([InlineKeyboardButton(
                f"{icon} {title}",
                callback_data=f"toggle_{ch_id}"
            )])
        
        keyboard.extend([
            [InlineKeyboardButton("üîò Gestionar Botones", callback_data="manage_buttons")],
            [InlineKeyboardButton("üëÄ Vista Previa", callback_data="preview")],
            [InlineKeyboardButton("üì§ Publicar", callback_data="publish")]
        ])
        
        post = data.get('current_post')
        button_info = f"üîò Botones: **{len(post.buttons)}**" if post else ""
        
        text = f"üéØ **Seleccionar Canales**\n\n" \
               f"‚úÖ Seleccionados: **{selected_count}**\n" \
               f"üì∫ Disponibles: **{len(data['channels'])}**\n" \
               f"{button_info}\n\n" \
               f"Toca los canales para seleccionar"
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def manage_channels(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Gestionar canales"""
        user_id = update.effective_user.id
        data = self.get_user_data(user_id)
        
        if not data['channels']:
            keyboard = [[InlineKeyboardButton("‚ûï A√±adir Canal", callback_data="add_channel")]]
            text = """üì∫ **Gesti√≥n de Canales**

‚ùå No tienes canales configurados.

**Para a√±adir un canal:**
1. A√±ade el bot como administrador
2. Dale permisos de publicaci√≥n
3. Usa el bot√≥n para a√±adir"""
        else:
            keyboard = [
                [InlineKeyboardButton("‚ûï A√±adir Canal", callback_data="add_channel")],
                [InlineKeyboardButton("üóëÔ∏è Eliminar Canal", callback_data="remove_channel")]
            ]
            
            text = f"üì∫ **Tus Canales** ({len(data['channels'])})\n\n"
            
            for i, (ch_id, ch_info) in enumerate(list(data['channels'].items())[:8], 1):
                title = ch_info.get('title', 'Canal sin nombre')
                username = ch_info.get('username', '')
                if username:
                    text += f"{i}. **{title}** (@{username})\n"
                else:
                    text += f"{i}. **{title}**\n"
        
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def add_channel(self, update, user_id, channel_text):
        """A√±ade un canal con validaci√≥n"""
        data = self.get_user_data(user_id)
        
        # Limpiar y normalizar texto
        channel_text = channel_text.strip()
        original_text = channel_text
        
        # Convertir diferentes formatos
        if channel_text.startswith('https://t.me/'):
            channel_text = channel_text.replace('https://t.me/', '@')
        elif channel_text.startswith('t.me/'):
            channel_text = channel_text.replace('t.me/', '@')
        elif not channel_text.startswith('@') and not channel_text.startswith('-'):
            channel_text = f'@{channel_text}'
        
        try:
            # Obtener informaci√≥n del chat
            if channel_text.startswith('@'):
                chat = await self.app.bot.get_chat(channel_text)
            elif channel_text.startswith('-'):
                chat_id = int(channel_text)
                chat = await self.app.bot.get_chat(chat_id)
            else:
                raise BadRequest("Formato inv√°lido")
            
            # Verificar permisos del bot
            bot_member = await self.app.bot.get_chat_member(chat.id, self.app.bot.id)
            if bot_member.status not in ['administrator', 'creator']:
                await update.message.reply_text(
                    f"‚ùå **Sin permisos de administrador**\n\n"
                    f"üì¢ Canal: **{chat.title}**\n\n"
                    f"**Soluci√≥n:**\n"
                    f"1. A√±ade el bot como administrador\n"
                    f"2. Otorga permisos de publicaci√≥n"
                )
                return
            
            # Verificar si ya existe
            if str(chat.id) in data['channels']:
                await update.message.reply_text(
                    f"‚ö†Ô∏è **Canal ya configurado**\n\nüì¢ {chat.title}"
                )
                return
            
            # Guardar canal
            data['channels'][str(chat.id)] = {
                'title': chat.title,
                'username': chat.username,
                'type': chat.type,
                'added_date': datetime.now().isoformat()
            }
            
            data['step'] = 'idle'
            
            keyboard = [
                [InlineKeyboardButton("üìù Nueva Publicaci√≥n", callback_data="new_post_quick")],
                [InlineKeyboardButton("‚ûï A√±adir Otro Canal", callback_data="add_channel")]
            ]
            
            await update.message.reply_text(
                f"‚úÖ **Canal a√±adido exitosamente**\n\n"
                f"üì¢ **Nombre:** {chat.title}\n"
                f"üìä **Total canales:** {len(data['channels'])}\n\n"
                f"üîò **Ahora puedes crear publicaciones con botones interactivos**",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"Error a√±adiendo canal {original_text}: {e}")
            await update.message.reply_text(
                f"‚ùå **Error:** {str(e)}\n\n"
                f"üîç Canal: `{original_text}`"
            )
    
    async def status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Mostrar estado actual"""
        user_id = update.effective_user.id
        data = self.get_user_data(user_id)
        
        text = f"üìä **Estado del Bot**\n\n"
        text += f"üë§ Usuario: {update.effective_user.first_name}\n"
        text += f"üì∫ Canales: **{len(data['channels'])}**\n"
        text += f"üîÑ Estado: **{data['step']}**\n"
        
        if data.get('current_post'):
            post = data['current_post']
            text += f"\nüìù **Publicaci√≥n Actual:**\n"
            text += f"‚Ä¢ Texto: {'‚úÖ' if post.text else '‚ùå'}\n"
            text += f"‚Ä¢ Media: **{len(post.media)}** archivos\n"
            text += f"‚Ä¢ Botones: **{len(post.buttons)}** ({post.button_layout})\n"
            text += f"‚Ä¢ Canales: **{len(post.target_channels)}** seleccionados\n"
        
        await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Cancelar acci√≥n actual"""
        user_id = update.effective_user.id
        data = self.get_user_data(user_id)
        
        data['current_post'] = None
        data['step'] = 'idle'
        data.pop('temp_button_text', None)
        
        await update.message.reply_text("‚ùå **Acci√≥n cancelada**\n\nPuedes empezar de nuevo cuando quieras.")
    
    async def help_cmd(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando de ayuda mejorado con botones"""
        text = """üöÄ **Bot Publicador Multi-Canal con Botones**

**üìã COMANDOS:**
‚Ä¢ `/nueva` - Crear publicaci√≥n con botones
‚Ä¢ `/canales` - Gestionar canales
‚Ä¢ `/estado` - Ver estado actual
‚Ä¢ `/help` - Esta ayuda

**üîò TIPOS DE BOTONES:**
‚Ä¢ **üîó Links externos** - Sitios web, tiendas
‚Ä¢ **üìû WhatsApp** - Contacto directo
‚Ä¢ **üì∫ Telegram** - Canales y grupos
‚Ä¢ **üõí E-commerce** - Botones de compra
‚Ä¢ **üìä Encuestas** - Interacci√≥n con usuarios

**üìã PLANTILLAS DISPONIBLES:**
‚Ä¢ **E-commerce** - Comprar, Contactar, Valorar
‚Ä¢ **Social** - Like, Comentar, Compartir
‚Ä¢ **Educativo** - Ver Curso, Inscribirse
‚Ä¢ **Noticias** - Leer M√°s, Suscribirse

**üéØ EJEMPLOS DE USO:**
```
üìù "Nueva oferta disponible!"
üîò [üõí Comprar Ahora] [üìû WhatsApp]

üé• Video tutorial de programaci√≥n
üîò [üìö Ver Curso Completo]
üîò [üí¨ Grupo de Estudiantes]

üì∞ Noticia importante
üîò [üìñ Leer Art√≠culo] [üîî Suscribirse]
```

**‚öôÔ∏è LAYOUTS DE BOTONES:**
‚Ä¢ **Horizontal** - Botones en fila (m√°x 3)
‚Ä¢ **Vertical** - Un bot√≥n por fila  
‚Ä¢ **Grid** - Cuadr√≠cula 2x2

**üí° CONSEJOS:**
‚Ä¢ Los botones aumentan el engagement
‚Ä¢ Usa CTAs (Call To Action) claros
‚Ä¢ M√°ximo 8 botones por mensaje
‚Ä¢ Combina diferentes tipos de botones

**üöÄ ¬°Crea contenido interactivo que genere acci√≥n!**"""
        
        keyboard = [
            [KeyboardButton("üìù Nueva Publicaci√≥n"), KeyboardButton("üì∫ Mis Canales")],
            [KeyboardButton("üîò Plantillas de Botones"), KeyboardButton("üìä Estado")]
        ]
        
        await update.message.reply_text(
            text,
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )

# Resto del c√≥digo (servidor web, etc.) se mantiene igual
async def webhook_handler(request: Request) -> Response:
    """Maneja webhooks de Telegram"""
    try:
        body = await request.text()
        update = Update.de_json(json.loads(body), bot.app.bot)
        await bot.app.process_update(update)
        return Response(text="OK")
    except Exception as e:
        logger.error(f"Error en webhook: {e}")
        return Response(text="ERROR", status=500)

async def health_check(request: Request) -> Response:
    """Health check"""
    try:
        bot_info = await bot.app.bot.get_me()
        return Response(
            text=json.dumps({
                "status": "OK",
                "bot_username": bot_info.username,
                "active_users": len(user_data),
                "features": ["multi_channel", "buttons", "multimedia"],
                "timestamp": datetime.now().isoformat()
            }),
            content_type="application/json"
        )
    except Exception as e:
        return Response(text=f"ERROR: {e}", status=500)

async def setup_webhook():
    """Configura webhook"""
    try:
        webhook_url = f"{WEBHOOK_URL}/webhook"
        await bot.app.bot.set_webhook(url=webhook_url)
        logger.info(f"‚úÖ Webhook configurado: {webhook_url}")
    except Exception as e:
        logger.error(f"‚ùå Error webhook: {e}")

async def init_app():
    """Inicializa aplicaci√≥n"""
    await bot.app.initialize()
    await bot.app.start()
    await setup_webhook()
    
    app = web.Application()
    app.router.add_post('/webhook', webhook_handler)
    app.router.add_get('/', health_check)
    app.router.add_get('/health', health_check)
    
    return app

# Instancia del bot
bot = TelegramBot()

def main():
    """Funci√≥n principal"""
    import asyncio
    
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        app = loop.run_until_complete(init_app())
        
        logger.info(f"üöÄ Bot con Botones Interactivos INICIADO")
        logger.info(f"üåê Puerto: {PORT}")
        logger.info(f"üîó Webhook: {WEBHOOK_URL}")
        logger.info(f"üîò Funcionalidades: Multi-canal + Botones")
        
        web.run_app(app, host='0.0.0.0', port=PORT)
        
    except Exception as e:
        logger.error(f"‚ùå Error cr√≠tico: {e}")

if __name__ == "__main__":
    main()